#!/bin/sh
#
# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Small victory.
echo "~~~ NOVM ~~~" >/dev/kmsg

# Mount proc, etc.
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /run
mount -t devtmpfs devtmpfs /dev
mount -t devpts devpts /dev/pts

# Load all virt-io modules.
modprobe virtio
modprobe virtio-ring
modprobe virtio-pci
modprobe virtio-net
modprobe virtio-blk
modprobe virtio-console
modprobe 9pnet_virtio
modprobe 9p

# Mount our root context.
mkdir -p /sysroot
mount -t 9p -o trans=virtio,version=9p2000.u,cache=fscache,access=any,rw root /sysroot

# Ensure necessary mount points are present
mkdir -p /sysroot/dev
mkdir -p /sysroot/proc

# Mount our init context.
# We stash the init binary inside file descriptor 3.
# This allows us to cleanly unmount everything here,
# while still executing this process once we're in the
# real root filesystem.
mkdir -p /sysinit
mount -t 9p -o trans=virtio,version=9p2000.u,cache=fscache,access=any,ro init /sysinit
exec 3</sysinit/init
umount -l /sysinit

# Execute our noinit process.
#
# The second thing it will do is open
# the virtIO console and become an RPC
# server for the backend. Yeehaw!
exec /sbin/switch_root /sysroot /proc/self/fd/3 >/dev/kmsg 2>&1
